package blockchain

import (
	"bytes"
	"crypto/ecdsa"
	"crypto/elliptic"
	"crypto/rand"
	"crypto/sha256"
	"encoding/gob"
	"encoding/hex"
	"fmt"
	"log"
	"math/big"
)

// TXInput 结构:
// 注意: ScriptSig 被替换为 Signature 和 PubKey
type TXInput struct {
	Txid      []byte // 引用来源交易的 ID (哈希)
	Vout      int    // 引用来源交易的某个输出的索引
	Signature []byte // 数字签名
	PubKey    []byte // 完整的公钥
}

// TXOutput 结构:
type TXOutput struct {
	Value        int    // 金额
	ScriptPubKey []byte // 锁定脚本，这里是公钥哈希
}

// UsesKey 检查输入是否使用了特定的公钥哈希
func (in *TXInput) UsesKey(pubKeyHash []byte) bool {
	lockingHash := HashPubKey(in.PubKey)
	return bytes.Equal(lockingHash, pubKeyHash)
}

// IsLockedWithKey 检查输出是否可以用提供的公钥哈希解锁
func (out *TXOutput) IsLockedWithKey(pubKeyHash []byte) bool {
	return bytes.Equal(out.ScriptPubKey, pubKeyHash)
}

// TXOutputs 收集 TXOutput
type TXOutputs struct {
	Outputs []TXOutput
}

// Serialize 序列化 TXOutputs
func (outs TXOutputs) Serialize() []byte {
	var res bytes.Buffer
	encoder := gob.NewEncoder(&res)

	err := encoder.Encode(outs)
	if err != nil {
		log.Panic(err)
	}

	return res.Bytes()
}

// DeserializeOutputs 反序列化 TXOutputs
func DeserializeOutputs(data []byte) TXOutputs {
	var outputs TXOutputs

	decoder := gob.NewDecoder(bytes.NewReader(data))
	err := decoder.Decode(&outputs)
	if err != nil {
		log.Panic(err)
	}

	return outputs
}

// Transaction 结构:
type Transaction struct {
	ID   []byte     // 交易的唯一标识 (哈希)
	Vin  []TXInput  // 交易输入
	Vout []TXOutput // 交易输出
}

// Hash 计算交易的哈希值，用于生成交易ID
func (tx *Transaction) Hash() []byte {
	var hash [32]byte

	txCopy := *tx
	txCopy.ID = []byte{}

	var res bytes.Buffer
	encoder := gob.NewEncoder(&res)
	err := encoder.Encode(txCopy)
	if err != nil {
		log.Panic(err)
	}

	hash = sha256.Sum256(res.Bytes())

	return hash[:]
}

// IsCoinbase 检查交易是否为 Coinbase 交易
func (tx *Transaction) IsCoinbase() bool {
	// Coinbase 交易只有一个输入，且该输入的 Txid 为空，Vout 为 -1
	return len(tx.Vin) == 1 && len(tx.Vin[0].Txid) == 0 && tx.Vin[0].Vout == -1
}

// NewCoinbaseTX 创建并返回一个 Coinbase 交易
func NewCoinbaseTX(to, data string) *Transaction {
	if data == "" {
		data = fmt.Sprintf("Reward to %s", to)
	}

	// Coinbase 交易没有真实的输入，所以 Signature 和 PubKey 为 nil
	in := TXInput{[]byte{}, -1, nil, []byte(data)}
	pubKeyHash := Base58Decode([]byte(to))
	pubKeyHash = pubKeyHash[1 : len(pubKeyHash)-4]
	out := TXOutput{100, pubKeyHash} // 奖励 100 个币

	tx := Transaction{nil, []TXInput{in}, []TXOutput{out}}
	tx.ID = tx.Hash()

	return &tx
}

// TrimmedCopy 创建一个用于签名的交易副本
// 这个副本清空了输入的 Signature 和 PubKey 字段
func (tx *Transaction) TrimmedCopy() Transaction {
	var inputs []TXInput
	var outputs []TXOutput

	for _, vin := range tx.Vin {
		inputs = append(inputs, TXInput{vin.Txid, vin.Vout, nil, nil})
	}

	for _, vout := range tx.Vout {
		outputs = append(outputs, TXOutput{vout.Value, vout.ScriptPubKey})
	}

	txCopy := Transaction{tx.ID, inputs, outputs}

	return txCopy
}

// Sign 使用私钥对交易进行签名
func (tx *Transaction) Sign(privKey ecdsa.PrivateKey, prevTXs map[string]Transaction) {
	if tx.IsCoinbase() {
		return
	}

	// 检查每个输入引用的前序交易是否存在
	for _, vin := range tx.Vin {
		if prevTXs[hex.EncodeToString(vin.Txid)].ID == nil {
			log.Panic("ERROR: Previous transaction is not correct")
		}
	}

	txCopy := tx.TrimmedCopy()

	for inID, vin := range txCopy.Vin {
		prevTx := prevTXs[hex.EncodeToString(vin.Txid)]
		txCopy.Vin[inID].Signature = nil
		// PubKey 被设置为所引用输出的锁定脚本 (PubKeyHash)
		txCopy.Vin[inID].PubKey = prevTx.Vout[vin.Vout].ScriptPubKey
		// 对整个交易副本进行哈希，得到待签名的“指纹”
		txCopy.ID = txCopy.Hash()
		txCopy.Vin[inID].PubKey = nil // 重置 PubKey，不影响下一个输入的签名

		// 使用私钥对交易哈希进行签名
		r, s, err := ecdsa.Sign(rand.Reader, &privKey, txCopy.ID)
		if err != nil {
			log.Panic(err)
		}
		signature := append(r.Bytes(), s.Bytes()...)

		// 将签名和完整的公钥附加到原始交易的输入中
		tx.Vin[inID].Signature = signature
		tx.Vin[inID].PubKey = privKey.PublicKey.X.Bytes()
	}
}

// Verify 验证交易签名的有效性
func (tx *Transaction) Verify(prevTXs map[string]Transaction) bool {
	if tx.IsCoinbase() {
		return true
	}

	// 检查每个输入引用的前序交易是否存在
	for _, vin := range tx.Vin {
		if prevTXs[hex.EncodeToString(vin.Txid)].ID == nil {
			log.Panic("ERROR: Previous transaction is not correct")
		}
	}

	txCopy := tx.TrimmedCopy()
	curve := elliptic.P256() // 使用与生成密钥时相同的椭圆曲线

	for inID, vin := range tx.Vin {
		prevTx := prevTXs[hex.EncodeToString(vin.Txid)]
		txCopy.Vin[inID].Signature = nil
		txCopy.Vin[inID].PubKey = prevTx.Vout[vin.Vout].ScriptPubKey
		txCopy.ID = txCopy.Hash()
		txCopy.Vin[inID].PubKey = nil

		// 从输入中解析出签名 (r, s) 和公钥 (x, y)
		r := big.Int{}
		s := big.Int{}
		sigLen := len(vin.Signature)
		r.SetBytes(vin.Signature[:(sigLen / 2)])
		s.SetBytes(vin.Signature[(sigLen / 2):])

		x := big.Int{}
		y := big.Int{}
		keyLen := len(vin.PubKey)
		x.SetBytes(vin.PubKey[:(keyLen / 2)])
		y.SetBytes(vin.PubKey[(keyLen / 2):])

		rawPubKey := ecdsa.PublicKey{Curve: curve, X: &x, Y: &y}
		if !ecdsa.Verify(&rawPubKey, txCopy.ID, &r, &s) {
			return false // 验证失败
		}
	}

	return true
}
